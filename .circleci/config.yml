version: 2.1

orbs:
  codecov: codecov/codecov@1.0.2

executors:
  ubuntu:
    parameters:
      stack_yaml:
        type: string
        default: stack.yaml

    docker:
      - image: cimg/base:2020.01
    shell: /bin/bash -eux -o pipefail
    environment:
      STACK_YAML: << parameters.stack_yaml >>

  ubuntu_with_databases:
    parameters:
      stack_yaml:
        type: string
        default: stack.yaml

    docker:
      - image: cimg/base:2020.01
      - image: postgres:13.1
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: persistent_mtl
    shell: /bin/bash -eux -o pipefail
    environment:
      STACK_YAML: << parameters.stack_yaml >>

commands:
  install_stack:
    steps:
      - run:
          name: Install stack
          command: |
            sudo apt-get update
            curl -sSL https://get.haskellstack.org/ | sh
            stack --version

  build_stack_deps:
    steps:
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y postgresql libpq-dev
      - run:
          name: Build stack dependencies
          command: stack build --test --only-dependencies

  with_stack_cache:
    parameters:
      install_deps:
        type: steps

    steps:
      - run:
          name: Build cache key
          command: |
            mkdir -p .ci
            stack --version | tee .ci/stack-key.txt
            echo "${STACK_YAML}" | tee -a .ci/stack-key.txt
            shasum "${STACK_YAML}" | tee -a .ci/stack-key.txt
      - restore_cache:
          keys:
            - v0-{{ .Environment.CIRCLE_JOB }}-{{ checksum ".ci/stack-key.txt" }}-{{ checksum "package.yaml" }}
            - v0-{{ .Environment.CIRCLE_JOB }}-{{ checksum ".ci/stack-key.txt" }}
      - << parameters.install_deps >>
      - save_cache:
          key: v0-{{ .Environment.CIRCLE_JOB }}-{{ checksum ".ci/stack-key.txt" }}-{{ checksum "package.yaml" }}
          paths:
            - ~/.stack
            - .stack-work

jobs:
  lint:
    executor: ubuntu
    steps:
      - checkout
      - run:
          name: Install hlint
          command: |
            HLINT_ARCHIVE="hlint-${HLINT_VERSION}-x86_64-linux.tar.gz"
            curl -sSLO "https://github.com/ndmitchell/hlint/releases/download/v${HLINT_VERSION}/${HLINT_ARCHIVE}"
            mkdir -p ~/.local/bin/
            tar xzf "${HLINT_ARCHIVE}" -C ~/.local/bin/ --strip-components=1 "hlint-${HLINT_VERSION}/hlint"
          environment:
            HLINT_VERSION: 3.2.2
      - run:
          name: Install stylish-haskell
          command: |
            STYLISH_ARCHIVE="stylish-haskell-v${STYLISH_VERSION}-linux-x86_64.tar.gz"
            curl -sSLO "https://github.com/jaspervdj/stylish-haskell/releases/download/v${STYLISH_VERSION}/${STYLISH_ARCHIVE}"
            mkdir -p ~/.local/bin/
            tar xzf "${STYLISH_ARCHIVE}" -C ~/.local/bin/ --strip-components=1 "stylish-haskell-v${STYLISH_VERSION}-linux-x86_64/stylish-haskell"
          environment:
            STYLISH_VERSION: 0.12.2.0
      - run:
          name: Install pre-commit
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-venv
            python3 -m venv ~/.venv
            ~/.venv/bin/pip install pre-commit
            sudo ln -sf ~/.venv/bin/pre-commit /usr/local/bin/
      - run:
          name: Run pre-commit
          command: pre-commit run --all-files -v --show-diff-on-failure
          ENVIRONMENT:
            SKIP: no-commit-to-branch

  run_build_and_test:
    parameters:
      stack_yaml:
        type: string
        default: stack.yaml
      latest:
        type: boolean
        default: false

    executor:
      name: ubuntu_with_databases
      stack_yaml: << parameters.stack_yaml >>

    steps:
      - checkout
      - install_stack
      - with_stack_cache:
          install_deps:
            - build_stack_deps
            - when:
                condition: << parameters.latest >>
                steps:
                  - run:
                      name: Install hpc-lcov
                      command: stack install hpc-lcov
      - run:
          name: Build
          command: |
            STACK_ARGS=(
                --test
                --no-run-tests
                <<# parameters.latest >>--coverage<</ parameters.latest >>
            )
            stack build "${STACK_ARGS[@]}"
      - run:
          name: Check Cabal file up to date
          command: git diff --exit-code *.cabal
      - run:
          name: Test
          command: |
            STACK_ARGS=(
                --test
                --ta --no-create
                <<# parameters.latest >>--coverage<</ parameters.latest >>
            )
            stack build "${STACK_ARGS[@]}"
          environment:
            TEST_POSTGRESQL: 1
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Run hpc-lcov
                command: hpc-lcov
            - codecov/upload:
                file: lcov.info

  haddock:
    executor: ubuntu
    steps:
      - checkout
      - install_stack
      - with_stack_cache:
          install_deps:
            - build_stack_deps
      - run:
          name: Build haddock
          command: stack haddock --no-haddock-deps
      - run:
          name: Bundle haddock docs
          command: |
            mkdir -p .ci/
            tar czf .ci/haddock-docs.tar.gz -C "$(find .stack-work/dist -regex '.*/doc/html/[^/]*')" .
      - store_artifacts:
          path: .ci/haddock-docs.tar.gz

  check_codegen:
    executor: ubuntu
    steps:
      - checkout
      - install_stack
      - with_stack_cache:
          install_deps:
            - run:
                name: Run code generation
                command: scripts/generate/run.sh
      - run:
          name: Check if generated code not up to date
          command: git diff --exit-code *.hs

  run_sdist:
    executor: ubuntu
    steps:
      - checkout
      - install_stack
      - with_stack_cache:
          install_deps:
            - run:
                name: Install GHC
                command: stack setup
      - run: stack sdist
      - run:
          name: Copy package archive
          command: |
            mkdir -p .ci/
            cp $(stack path --dist-dir)/persistent-mtl-*.tar.gz .ci/
      - store_artifacts:
          path: .ci/
          destination: .

workflows:
  version: 2

  build_and_test:
    jobs:
      - lint
      - haddock
      - check_codegen
      - run_sdist
      - run_build_and_test:
          name: test_latest
          latest: true
      - run_build_and_test:
          name: test_ghc_9.0
          stack_yaml: stack-ghc-9.0.yaml
      - run_build_and_test:
          name: test_ghc_8.10
          stack_yaml: stack-ghc-8.10.yaml
