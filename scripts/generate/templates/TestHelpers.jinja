{%- import 'macros.jinja' as macros -%}

{- THIS FILE IS AUTOGENERATED AND SHOULD NOT BE EDITED MANUALLY -}
{- FOURMOLU_DISABLE -}

{-# LANGUAGE CPP #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE PatternSynonyms #-}

module Generated where

import Data.Acquire (Acquire)
import Data.Conduit (ConduitM)
import Data.Int (Int64)
import Data.Map (Map)
import Data.Text (Text)
import Data.Void (Void)
import Database.Persist.Sql (CautiousMigration, Entity, Key, PersistValue, Sql)

import Database.Persist.Monad.TestUtils (SqlQueryRep(..))
import Example

allSqlQueryRepShowRepresentations :: [String]
allSqlQueryRepShowRepresentations =
  {%- for fn in functions if fn.conduit_from is none %}
  {% call macros.with_condition(fn) -%}
    {% if loop.first %}[ {% else %}, {% endif -%}
    show (
      {{- fn.name | capital_first }}
      {%- for _ in fn.args %} undefined{% endfor %} :: {{
        macros.SqlQueryRep_type(fn)
          | replace("record1", "Person")
          | replace("record2", "Post")
          | replace("record", "Person")
          | replace("m2", "IO")
          | replace("[a]", "[Entity Person]")
      -}}
    )
  {%- endcall -%}
  {% endfor %}
  ]
