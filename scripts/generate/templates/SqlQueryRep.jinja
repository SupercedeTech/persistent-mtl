{%- import 'macros.jinja' as macros -%}

{- THIS FILE IS AUTOGENERATED AND SHOULD NOT BE EDITED MANUALLY -}
{- FOURMOLU_DISABLE -}

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}

{-|
Module: Database.Persist.Monad.SqlQueryRep

Defines the 'SqlQueryRep' data type that contains a constructor corresponding
to a @persistent@ function.

This file is autogenerated, to keep it in sync with
@Database.Persist.Monad.Shim@.
-}
module Database.Persist.Monad.SqlQueryRep
  ( SqlQueryRep (..)
  , runSqlQueryRep
  ) where

import Control.Monad.IO.Class (MonadIO)
import Control.Monad.IO.Unlift (MonadUnliftIO)
import Data.Acquire (Acquire)
import Data.Conduit (ConduitM)
import Data.Int (Int64)
import Data.Map (Map)
import Data.Proxy (Proxy (..))
import Data.Text (Text)
import qualified Data.Text as Text
import Data.Typeable (Typeable, eqT, typeRep, (:~:) (..))
import Data.Void (Void)
import Database.Persist.Sql as Persist hiding (pattern Update)
import GHC.Stack (HasCallStack)

#if !MIN_VERSION_persistent(2,14,1)
import Database.Persist.Monad.Internal.PersistentShim (SafeToInsert)
#endif

{% macro SqlQueryRep_constructors() -%}
  {%- set outer_caller = caller -%}
  {% for fn in functions if fn.conduit_from is none -%}
    {% call macros.with_condition(fn) -%}
      {{ outer_caller(fn) }}
    {%- endcall -%}
  {% endfor -%}
{%- endmacro -%}

-- | The data type containing a constructor for each persistent function we'd
-- like to lift into 'Database.Persist.Monad.MonadSqlQuery'.
--
-- The @record@ type parameter contains the 'PersistEntity' types used in a
-- given function.
--
-- We're using a free-monads-like technique here to allow us to introspect
-- persistent functions in 'Database.Persist.Monad.MonadSqlQuery', e.g. to
-- mock out persistent calls in tests.
data SqlQueryRep record a where
{%- call(fn) SqlQueryRep_constructors() %}
  -- | Constructor corresponding to 'Persist.{{ fn.name }}'
  {{ fn.name | capital_first }} ::
    ({{ macros.gen_constraints(fn.constraints) }}) =>
    {% for arg in fn.args -%}
      {{ arg }} ->
    {% endfor -%}
    {{ macros.SqlQueryRep_type(fn) }}
{% endcall %}
  -- | Constructor for lifting an arbitrary SqlPersistT action into SqlQueryRep.
  UnsafeLiftSql
    :: Text -> (forall m. MonadIO m => Persist.SqlPersistT m a) -> SqlQueryRep Void a

instance Typeable record => Show (SqlQueryRep record a) where
  show = \case
    {%- call(fn) SqlQueryRep_constructors() %}
    {{ fn.name | capital_first }}{} -> "{{ fn.name | capital_first }}{..}" ++ record
    {%- endcall %}
    UnsafeLiftSql label _ -> "UnsafeLiftSql{" ++ Text.unpack label ++ "}"
    where
      record = case recordTypeRep of
        Just recordType -> "<" ++ show recordType ++ ">"
        Nothing -> ""
      recordTypeRep = case eqT @record @Void of
        Just Refl -> Nothing
        Nothing -> Just $ typeRep $ Proxy @record

-- | A helper to execute the actual @persistent@ function corresponding to
-- each 'SqlQueryRep' data constructor.
runSqlQueryRep :: MonadUnliftIO m => SqlQueryRep record a -> Persist.SqlPersistT m a
runSqlQueryRep = \case
{%- call(fn) SqlQueryRep_constructors() %}
  {{ fn.name | capital_first }} {{- macros.arg_vars(fn) }} -> Persist.{{ fn.name }} {{- macros.arg_vars(fn) }}
{%- endcall %}
  UnsafeLiftSql _ action -> action
