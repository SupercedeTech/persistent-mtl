{-|
Module: Database.Persist.Monad.SqlQueryRep

Defines the 'SqlQueryRep' data type that contains a constructor corresponding
to a @persistent@ function.

This file is autogenerated, to keep it in sync with
@Database.Persist.Monad.Shim@.
-}

{- THIS FILE IS AUTOGENERATED AND SHOULD NOT BE EDITED MANUALLY -}

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeSynonymInstances #-}

module Database.Persist.Monad.SqlQueryRep
  ( QueryRepCompatible(..)
  , withCompatibleQueryRep
  , SqlQueryRep(..)
  , runSqlQueryRep
  ) where

import Control.Monad.IO.Class (MonadIO)
import Data.Acquire (Acquire)
import Data.Conduit (ConduitM)
import Data.Int (Int64)
import Data.Map (Map)
import Data.Proxy (Proxy(..))
import Data.Text (Text)
import qualified Data.Text as Text
import Data.Typeable (Typeable, eqT, typeRep, (:~:)(..))
import Data.Void (Void)
import Database.Persist.Sql as Persist hiding (pattern Update)
import GHC.Stack (HasCallStack)

{-# ANN module "HLint: ignore" #-}

-- | Class of compatible query representations.
--
-- If @'QueryRepCompatible' sup sub@, then queries in @sup@ can also
-- represented as queries in @sub@ - so @sub@ must be at least as detailed
-- as @sup@ in representing queries.
--
-- This is the equivalent to Persistent's 'BackendCompatible', but for query
-- representations
class QueryRepCompatible sup sub where
  projectQueryRep :: sup record a -> sub record a

instance QueryRepCompatible q q where
  projectQueryRep = id

-- | Run a function expecting a particular 'QueryRep' type using a compatible type
-- instead. This allows for "lifting" functions from the base @sub@ 'QueryRep' to
-- the more-powerful @sup@ 'QueryRep'.
--
-- This is the equivalent to Persistent's 'withCompatibleBackend', using our
-- notion of compatiblity ('QueryRepCompatible').
withCompatibleQueryRep
  :: QueryRepCompatible sup sub
  => (sub record a -> b)
  -> sup record a
  -> b
withCompatibleQueryRep = (. projectQueryRep)

-- | The data type containing a constructor for each persistent function we'd
-- like to lift into 'Database.Persist.Monad.MonadSqlQuery'.
--
-- The @record@ type parameter contains the 'PersistEntity' types used in a
-- given function.
--
-- We're using a free-monads-like technique here to allow us to introspect
-- persistent functions in 'Database.Persist.Monad.MonadSqlQuery', e.g. to
-- mock out persistent calls in tests.
data SqlQueryRep record a where
{{#sqlQueryRepConstructors}}
{{#withCondition}}
  -- | Constructor corresponding to 'Persist.{{{name}}}'
  {{{nameCapital}}}
    :: ({{#constraints}}{{{type}}}{{^last}}, {{/last}}{{/constraints}})
    => {{#args}}{{{type}}} -> {{/args}}SqlQueryRep {{sqlQueryRepRecord}} {{sqlQueryRepResult}}
{{/withCondition}}

{{/sqlQueryRepConstructors}}
  -- | Constructor for lifting an arbitrary SqlPersistT action into SqlQueryRep.
  UnsafeLiftSql
    :: Text -> (forall m. MonadIO m => Persist.SqlPersistT m a) -> SqlQueryRep Void a

instance Typeable record => Show (SqlQueryRep record a) where
  show = \case
{{#sqlQueryRepConstructors}}
{{#withCondition}}
    {{{nameCapital}}}{} -> "{{{nameCapital}}}{..}" ++ record
{{/withCondition}}
{{/sqlQueryRepConstructors}}
    UnsafeLiftSql label _ -> "UnsafeLiftSql{" ++ Text.unpack label ++ "}"
    where
      record = case recordTypeRep of
        Just recordType -> "<" ++ show recordType ++ ">"
        Nothing -> ""
      recordTypeRep = case eqT @record @Void of
        Just Refl -> Nothing
        Nothing -> Just $ typeRep $ Proxy @record

-- | A helper to execute the actual @persistent@ function corresponding to
-- each 'SqlQueryRep' data constructor.
runSqlQueryRep :: MonadIO m => SqlQueryRep record a -> Persist.SqlPersistT m a
runSqlQueryRep = \case
{{#sqlQueryRepConstructors}}
{{#withCondition}}
  {{{nameCapital}}} {{#args}}a{{index}} {{/args}}-> Persist.{{{name}}}{{#args}} a{{index}}{{/args}}
{{/withCondition}}
{{/sqlQueryRepConstructors}}
  UnsafeLiftSql _ action -> action
